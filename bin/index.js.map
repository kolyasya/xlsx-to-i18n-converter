{"mappings":"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","sources":["src/bin/index.js","src/index.js","src/prepareTranslations.js","src/readTranslationsFile.js","src/getTranslationsSettings.js","src/saveTranslationsAsFiles.js"],"sourcesContent":["#!/usr/bin/env node\nimport program from 'commander';\n\nimport internationalizationParser from '../index';\n\nprogram\n  .command('convert')\n  .option('-s, --source <source>', 'Path to XLSX document')\n  .option('-o, --output <output>', 'Path to put JSON files')\n  .action(options => {\n    console.log('CONVERT FILES', options);\n\n    internationalizationParser({ source: options?.source, output: options?.output });\n  });\n\nprogram.parse(process.argv);\n","import prepareTranslations from './prepareTranslations';\nimport readTranslationsFile from './readTranslationsFile';\nimport saveTranslationsAsFiles from './saveTranslationsAsFiles';\n\nconst internationalizationParser = ({ source, output }) => {\n  const { translationsSheets, settings } = readTranslationsFile({\n    xlsxFilePath: source,\n  });\n\n  console.log('Translation settings:', settings);\n\n  const translations = prepareTranslations({\n    translationsSheets,\n    settings,\n  });\n\n  saveTranslationsAsFiles({ translations, settings, pathToSave: output });\n};\n\nexport default internationalizationParser;\n","import { difference } from 'lodash';\n\nconst logging = false;\n\nconst prepareTranslations = ({ translationsSheets = [], settings }) => {\n  console.log('ðŸ‡¬ðŸ‡§  Preparing translations...');\n\n  const translations = {};\n\n  if (translationsSheets?.length) {\n    translationsSheets.forEach(sheet => {\n      const sheetLanguages = sheet?.data?.[0]?.slice(1);\n\n      const missingLanguages = difference(settings?.languages?.sort(), sheetLanguages?.sort());\n\n      if (missingLanguages?.length) {\n        console.error(`Sheet \"${sheet?.name}\" has missing langauges ${missingLanguages}`);\n      }\n\n      for (let column = 1; column < sheet?.data?.[0]?.length; column++) {\n        const newFile = {};\n        const languageCode = sheet?.data?.[0]?.[column];\n\n        for (let row = 1; row < sheet?.data?.length; row++) {\n          const key = sheet?.data?.[row]?.[0];\n          const value = sheet?.data?.[row]?.[column];\n\n          if (value === undefined || value === '') {\n            console.error(\n              `Missing value for ${languageCode.toUpperCase()} language, sheet: \"${\n                sheet?.name\n              }\", key: \"${key}\", value: \"${value}\"`,\n            );\n          }\n\n          newFile[key] = value;\n        }\n\n        translations[`${languageCode}/${sheet?.name}.json`] = newFile;\n      }\n    });\n  }\n\n  logging && console.log('ðŸ‡¬ðŸ‡§  prepareTranslations result:');\n  logging && console.dir(translations, { depth: null });\n\n  return translations;\n};\n\nexport default prepareTranslations;\n","import xlsx from 'node-xlsx';\n\nimport getTranslationsSettings from './getTranslationsSettings';\n\nconst readTranslationsFile = ({ xlsxFilePath = '' }) => {\n  console.log('ðŸ‡¬ðŸ‡§  Reading translations file...');\n\n  if (!xlsxFilePath) {\n    throw new Error(`xlsxFilePath is missing`);\n  }\n\n  const workSheetsFromFile = xlsx.parse(xlsxFilePath);\n  let translationsSheets = workSheetsFromFile;\n  let settings = {};\n\n  if (workSheetsFromFile[0]?.name === 'package_settings') {\n    settings = getTranslationsSettings({ settingsSheet: workSheetsFromFile[0] });\n    // get all sheets except first one (settings one)\n    translationsSheets = workSheetsFromFile.slice(1);\n  }\n\n  return {\n    translationsSheets,\n    settings,\n  };\n};\n\nexport default readTranslationsFile;\n","const getTranslationsSettings = ({ settingsSheet }) => {\n  console.log('ðŸ‡¬ðŸ‡§  Reading settings sheet...');\n\n  let result = {};\n\n  if (settingsSheet?.data) {\n    result = settingsSheet?.data?.reduce((settingsResult, row) => {\n      if (row?.[0]) {\n        return {\n          ...settingsResult,\n          [row[0]]: row.slice(1),\n        };\n      } else {\n        return settingsResult;\n      }\n    }, {});\n  }\n\n  return result;\n};\n\nexport default getTranslationsSettings;\n","import fs from 'fs';\n\nconst saveTranslationsAsFiles = ({\n  translations,\n  pathToSave = `${process.cwd().split('.meteor')[0]}imports/internationalization/translations_test`,\n  settings = {},\n}) => {\n  const { languages } = settings;\n\n  languages?.forEach(language => {\n    const directoryPath = `${pathToSave}/${language}`;\n    console.log('Making a dir:', directoryPath);\n    try {\n      fs.mkdirSync(directoryPath, { recursive: true });\n    } catch (error) {}\n  });\n\n  Object.keys(translations).forEach(filePath => {\n    try {\n      const content = JSON.stringify(translations[filePath], null, 2);\n      const finalPath = `${pathToSave}/${filePath}`;\n      console.log(finalPath, content);\n      fs.writeFileSync(finalPath, content);\n    } catch (err) {\n      console.error(err);\n    }\n  });\n};\n\nexport default saveTranslationsAsFiles;\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}